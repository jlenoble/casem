"use strict";

// Generated from /home/jason/Projets/casem/src/static/antlr4/grammars/CommonLexerRules.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');

var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964", "\x02\x07.\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04", "\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x03\x02\x03", "\x02\x07\x02\x10\n\x02\f\x02\x0E\x02\x13\x0B\x02", "\x03\x03\x03\x03\x03\x03\x07\x03\x18\n\x03\f\x03", "\x0E\x03\x1B\x0B\x03\x05\x03\x1D\n\x03\x03\x04", "\x03\x04\x07\x04!\n\x04\f\x04\x0E\x04$\x0B\x04\x03", "\x04\x03\x04\x03\x05\x03\x05\x03\x06\x05\x06+", "\n\x06\x03\x06\x03\x06\x03\"\x02\x07\x03\x03\x05", "\x04\x07\x05\t\x06\x0B\x07\x03\x02\x07\x04\x02", "C\\c|\x05\x022;C\\c|\x03\x023;\x03\x022;\x04\x02\x0B", "\x0B\"\"\x022\x02\x03\x03\x02\x02\x02\x02\x05\x03", "\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03", "\x02\x02\x02\x02\x0B\x03\x02\x02\x02\x03\r\x03", "\x02\x02\x02\x05\x1C\x03\x02\x02\x02\x07\x1E\x03", "\x02\x02\x02\t'\x03\x02\x02\x02\x0B*\x03\x02\x02", "\x02\r\x11\t\x02\x02\x02\x0E\x10\t\x03\x02\x02\x0F", "\x0E\x03\x02\x02\x02\x10\x13\x03\x02\x02\x02\x11", "\x0F\x03\x02\x02\x02\x11\x12\x03\x02\x02\x02\x12", "\x04\x03\x02\x02\x02\x13\x11\x03\x02\x02\x02\x14", "\x1D\x072\x02\x02\x15\x19\t\x04\x02\x02\x16\x18", "\t\x05\x02\x02\x17\x16\x03\x02\x02\x02\x18\x1B", "\x03\x02\x02\x02\x19\x17\x03\x02\x02\x02\x19\x1A", "\x03\x02\x02\x02\x1A\x1D\x03\x02\x02\x02\x1B\x19", "\x03\x02\x02\x02\x1C\x14\x03\x02\x02\x02\x1C\x15", "\x03\x02\x02\x02\x1D\x06\x03\x02\x02\x02\x1E\"", "\x07$\x02\x02\x1F!\x0B\x02\x02\x02 \x1F\x03\x02", "\x02\x02!$\x03\x02\x02\x02\"#\x03\x02\x02\x02\"", " \x03\x02\x02\x02#%\x03\x02\x02\x02$\"\x03\x02\x02", "\x02%&\x07$\x02\x02&\b\x03\x02\x02\x02'(\t\x06\x02", "\x02(\n\x03\x02\x02\x02)+\x07\x0F\x02\x02*)\x03", "\x02\x02\x02*+\x03\x02\x02\x02+,\x03\x02\x02\x02", ",-\x07\f\x02\x02-\f\x03\x02\x02\x02\b\x02\x11\x19", "\x1C\"*\x02"].join("");

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
});

function CommonLexerRules(input) {
    antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

CommonLexerRules.prototype = Object.create(antlr4.Lexer.prototype);
CommonLexerRules.prototype.constructor = CommonLexerRules;

CommonLexerRules.EOF = antlr4.Token.EOF;
CommonLexerRules.ID = 1;
CommonLexerRules.UINT = 2;
CommonLexerRules.STRING = 3;
CommonLexerRules.WS = 4;
CommonLexerRules.NEWLINE = 5;

CommonLexerRules.prototype.channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

CommonLexerRules.prototype.modeNames = ["DEFAULT_MODE"];

CommonLexerRules.prototype.literalNames = [];

CommonLexerRules.prototype.symbolicNames = [null, "ID", "UINT", "STRING", "WS", "NEWLINE"];

CommonLexerRules.prototype.ruleNames = ["ID", "UINT", "STRING", "WS", "NEWLINE"];

CommonLexerRules.prototype.grammarFileName = "CommonLexerRules.g4";

exports.CommonLexerRules = CommonLexerRules;